/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        r_pinky_dance: r_pinky_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "R_PINKY_DANCE";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp QUESTION>, <&kp EXCLAMATION>;
        };

        rpinkydancemod: rpinkydancemod {
            compatible = "zmk,behavior-mod-morph";
            label = "RPINKYDANCEMOD";
            bindings = <&r_pinky_dance>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        colon_dance: colon_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "COLON_DANCE";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;
        };

        mod_keys: mod_keys {
            compatible = "zmk,behavior-tap-dance";
            label = "MOD_KEYS";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_ALT>, <&sk RIGHT_CONTROL>;
        };

        right_mod_cmd: right_mod_cmd {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_MOD_CMD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <17 4 14 24 32 31 23 13 3 2 12 22 21 11 1 0 10 20 30 33 34>;
        };

        left_mod_command: left_mod_command {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_MOD_COMMAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 33 34 25 15 16 26 6 7 17 27 28 18 8 9 19 29 35>;
        };

        right_thumb_tapdance: right_thumb_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_THUMB_TAPDANCE";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&mo 0>;
        };

        escape: escape {
            compatible = "zmk,behavior-hold-tap";
            label = "ESCAPE";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };

        enter: enter {
            compatible = "zmk,behavior-hold-tap";
            label = "ENTER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        quote: quote {
            compatible = "zmk,behavior-tap-dance";
            label = "QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp GRAVE>, <&triple_grave>;
        };

        left_control: left_control {
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_CONTROL";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_CONTROL>, <&sk LEFT_ALT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bluetooth {
            bindings = <&mo 7>;
            key-positions = <30 35>;
            layers = <0>;
        };

        media {
            bindings = <&mo 3>;
            key-positions = <32 33>;
        };

        layer_toggle_layer {
            bindings = <&mo 8>;
            key-positions = <31 34>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <10 19>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <20 29>;
        };

        dev_utils {
            bindings = <&mo 5>;
            key-positions = <30 31>;
        };

        design_util {
            bindings = <&mo 6>;
            key-positions = <34 35>;
        };
    };

    macros {
        triple_grave: triple_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "TRIPLE_GRAVE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp Q           &kp W  &kp E          &kp R                             &kp T                                  &kp Y           &kp U                           &kp I      &kp O  &kp BACKSPACE
  &kp A           &kp S  &kp D          &left_mod_command LEFT_COMMAND F  &kp G                                  &kp H           &right_mod_cmd RIGHT_COMMAND J  &kp K      &kp L  &quote
  &sk LEFT_SHIFT  &kp Z  &kp X          &kp C                             &kp V                                  &kp B           &kp N                           &kp M      &kp P  &rpinkydancemod
                         &left_control  &lt 1 TAB                         &escape LA(LC(LEFT_COMMAND)) ESCAPE    &enter 2 SPACE  &lt 4 ENTER                     &mod_keys
            >;
        };

        nav_vim {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp ESC         &kp O  &kp W  &kp R  &kp Y    &kp LEFT_PARENTHESIS  &kp B              &kp E         &kp LC(U)  &kp RIGHT_PARENTHESIS
  &kp A           &kp S  &kp D  &kp F  &kp I    &kp LEFT_ARROW        &kp DOWN_ARROW     &kp UP_ARROW  &kp RIGHT  &kp PERCENT
  &sk LEFT_SHIFT  &kp Z  &kp P  &kp C  &kp V    &kp LEFT_BRACE        &kp CARET          &kp DOLLAR    &kp LC(D)  &kp RIGHT_BRACE
                         &none  &kp U  &kp U    &kp LCTRL             &sk RIGHT_CONTROL  &kp G
            >;
        };

        num_sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp BACKSLASH   &kp N1  &kp N2        &kp N3   &kp PLUS     &kp UNDERSCORE    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp TILDE     &kp BACKSPACE
  &kp ASTRK       &kp N4  &kp N5        &kp N6   &kp MINUS    &kp EQUAL         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &colon_dance  &kp SLASH
  &sk LEFT_SHIFT  &kp N7  &kp N8        &kp N9   &kp POUND    &kp GREATER_THAN  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE      &kp AMPERSAND
                          &kp NUMBER_0  &kp TAB  &kp SPACE    &trans            &kp COLON             &kp LESS_THAN
            >;
        };

        Media {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOL_UP  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &kp C_PREVIOUS  &kp C_PP           &kp C_NEXT    &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &kp COMMA       &kp ENTER          &kp A         &kp C_AC_NEXT_KEYBOARD_LAYOUT_SELECT
                  &trans  &trans  &trans    &trans  &trans          &trans
            >;
        };

        utillity_layer {
            bindings = <
  &kp RS(RA(RC(RG(P))))  &kp LS(LA(LC(NUMBER_1)))  &kp LS(LA(LC(NUMBER_2)))  &kp LS(LA(LC(NUMBER_3)))  &kp RS(RA(RC(RG(S))))    &kp RS(RA(RC(RG(A))))  &kp RS(RA(RC(RG(B))))  &kp RS(RA(RG(RC(C))))  &kp RS(RA(RC(RG(D))))  &kp RS(RA(RC(RG(E))))
  &kp RS(RA(RC(RG(Q))))  &kp LS(LA(LC(NUMBER_4)))  &kp LS(LA(LC(N5)))        &kp LS(LA(LC(NUMBER_6)))  &kp RS(RA(RC(RG(T))))    &kp RS(RA(RC(RG(F))))  &kp RS(RA(RC(RG(G))))  &kp RS(RA(RC(RG(H))))  &kp RS(RA(RC(RG(I))))  &kp RS(RA(RC(RG(J))))
  &kp RS(RA(RC(RG(R))))  &kp LS(LA(LC(N7)))        &kp LS(LA(LC(N8)))        &kp LS(LA(LC(N9)))        &kp RS(RA(RC(RG(U))))    &kt RS(RA(RC(RG(K))))  &kp RS(RA(RC(RG(L))))  &kp RS(RA(RC(RG(M))))  &kp RS(RA(RC(RG(N))))  &kp RS(RA(RC(RG(O))))
                                                   &kp RS(RA(RC(RG(V))))     &kp RS(RA(RC(RG(W))))     &kp RS(RA(RC(RG(X))))    &kp RS(RA(RC(RG(Y))))  &trans                 &none
            >;
        };

        util_dev {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &kp RS(RA(RC(RG(NUMBER_1))))  &kp RS(RA(RC(RG(NUMBER_2))))  &kp RS(RA(RC(RG(NUMBER_3))))  &kp RS(RA(RC(RG(NUMBER_4))))  &kp RS(RA(RC(RG(N5))))
  &trans  &trans  &trans  &trans  &trans    &kp RS(RA(RC(RG(NUMBER_6))))  &kp RS(RA(RC(RG(N7))))        &kp RS(RA(RC(RG(N8))))        &kp RS(RA(RC(RG(N9))))        &kp RS(RA(RC(RG(N0))))
  &trans  &trans  &trans  &trans  &trans    &kp RS(RA(RC(A)))             &kp RS(RC(RA(B)))             &kp RS(RA(RC(C)))             &kp RS(RA(RC(D)))             &kp RS(RA(RC(E)))
                  &trans  &trans  &trans    &kp RS(RA(RC(F)))             &kp RS(RA(RC(G)))             &kp RS(RA(RC(H)))
            >;
        };

        util_design {
            bindings = <
  &kp LS(LA(LC(I)))  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))  &kp LS(LA(LC(L)))  &kp LS(LA(LC(M)))    &trans  &trans  &trans  &trans  &trans
  &kp LS(LA(LC(N)))  &kp LS(LA(LC(O)))  &kp LS(LA(LC(P)))  &kp LS(LA(LC(Q)))  &kp LS(LA(LC(R)))    &trans  &trans  &trans  &trans  &trans
  &kp LS(LA(LC(S)))  &kp LS(LA(LC(T)))  &kp LS(LA(LC(U)))  &kp LS(LA(LC(V)))  &kp LS(LA(LC(W)))    &trans  &trans  &trans  &trans  &trans
                                        &kp LS(LA(LC(X)))  &kp LS(LA(LC(Y)))  &kp LS(LA(LC(Z)))    &trans  &trans  &trans
            >;
        };

        bluetooth {
            bindings = <
  &trans       &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &trans    &trans      &trans      &trans  &trans  &bt BT_CLR
  &trans       &bt BT_SEL 3  &bt BT_SEL 4    &trans        &trans    &bt BT_PRV  &bt BT_NXT  &trans  &trans  &trans
  &bootloader  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &kp X     &trans      &trans      &trans  &trans  &bootloader
                             &sys_reset      &trans        &trans    &trans      &trans      &trans
            >;
        };

        lyr_toggle_sel {
            bindings = <
  &tog 10  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &to 0
  &trans   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &tog 9   &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                   &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        windows {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        cnc_windows {
            bindings = <
  &trans  &trans  &trans            &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans            &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans            &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &sk LEFT_CONTROL  &mo 11  &trans    &trans  &trans  &trans
            >;
        };

        gaming_numbers {
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &trans  &trans  &trans  &trans  &trans
  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
