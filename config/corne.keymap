/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        r_pinky_dance: r_pinky_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "R_PINKY_DANCE";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp QUESTION>, <&kp EXCLAMATION>;
        };

        rpinkydancemod: rpinkydancemod {
            compatible = "zmk,behavior-mod-morph";
            label = "RPINKYDANCEMOD";
            bindings = <&r_pinky_dance>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W  &kp E       &kp R               &kp T        &kp Y        &kp U        &kp I     &kp O            &kp P            &none
&none  &mt LCTRL A     &kp S  &mt LALT D  &mt LEFT_COMMAND F  &kp G        &kp H        &kp J        &kp K     &kp L            &kp COLON        &none
&none  &sk LEFT_SHIFT  &kp Z  &kp X       &kp C               &kp V        &kp B        &kp N        &kp M     &rpinkydancemod  &sk RIGHT_SHIFT  &none
                              &kp LCTRL   &lt 3 TAB           &lt 1 ESC    &lt 2 SPACE  &lt 4 ENTER  &kp BSPC
            >;
        };

        Vim {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp ESC  &kp O  &kp W    &kp R  &kp Y     &kp LEFT_PARENTHESIS  &kp B      &kp UP       &kp E      &kp RIGHT_PARENTHESIS  &none
&none  &kp A    &kp S  &kp D    &kp F  &kp I     &kp CARET             &kp LEFT   &kp DOWN     &kp RIGHT  &kp DOLLAR             &trans
&none  &kp Z    &kp Z  &kp P    &kp C  &kp V     &kp LEFT_BRACE        &kp LC(D)  &kp PERCENT  &kp LC(U)  &kp RIGHT_BRACE        &trans
                       &kp ESC  &kp U  &trans    &kp LCTRL             &kp LSHFT  &kp G
            >;
        };

        Num_Sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp FSLH   &kp N1  &kp N2   &kp N3   &kp MINUS    &kp UNDERSCORE    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LBKT      &kp RBKT       &none
&none  &kp ASTRK  &kp N4  &kp N5   &kp N6   &kp PLUS     &kp EQUAL         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE      &kp SQT        &none
&none  &kp LSHFT  &kp N7  &kp N8   &kp N9   &kp RET      &kp GREATER_THAN  &kp LESS_THAN         &kp DOT                &kp QUESTION  &kp AMPERSAND  &none
                          &kp RET  &kp TAB  &kp SPACE    &trans            &kp LSHFT             &kp BSLH
            >;
        };

        Applications {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
                       &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
                       &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
                       &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
                       &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Lyr5 {
            if-layers = <1 2>;
            then-layer = <5>;
        };
    };
};
